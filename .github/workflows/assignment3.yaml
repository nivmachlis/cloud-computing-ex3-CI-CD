name: assignment3

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Add name and date to log file
        run: |
          echo $(date -Iminutes) > log.txt
          echo Bar Nir and Niv Machlis >> log.txt
      - name: Build Docker image
        id: build_docker
        continue-on-error: true
        run: docker build -t dish_meal_services .
      - name: Log Docker build result
        run: |
          if [[ "${{ steps.build_docker.outcome }}" == "success" ]]; then
            echo "Image successfully built" >> log.txt
          else
            echo "Image not able to be built" >> log.txt
          fi
      - name: Save docker image to gzip
        run: docker save dish_meal_services | gzip > dish_meal_services.tar.gz
      - name: Upload log file to artifact
        uses: actions/upload-artifact@v2
        with:
          name: log.txt
          path: log.txt
      - name: validate docker built
        run: |
          if [[ "${{ steps.build_docker.outcome }}" == "failure" ]]; then
            exit 1
          fi
      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v2
        with:
          name: dish_meal_services
          path: dish_meal_services.tar.gz

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Docker image from artifact
        uses: actions/download-artifact@v2
        with:
          name: dish_meal_services
      - name: Download log from artifact
        uses: actions/download-artifact@v2
        with:
          name: log.txt
      - name: Load Docker image from gzip
        run: |
          docker load < dish_meal_services.tar.gz
          cat log.txt
      - name: Run Docker image
        id: run_docker
        env:
          NINJA_API_KEY: ${{secrets.NINJA_API_KEY}}
        run: |
          docker run -e NINJA_API_KEY -p 8000:8000 -d dish_meal_services
          sleep 5
          docker ps
      - name: Log Docker run result
        run: |
          if [[ "$(docker ps | wc -l)" -gt 1 ]]; then
            echo "Container up and running" >> log.txt
          else
            echo "Container failed to run" >> log.txt
          fi
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Run tests
        id: run_tests
        continue-on-error: true
        run: |
          pytest -v tests/assn3_tests.py > assn3_test_results.txt
      - name: Log tests result
        run: |
          if [[ "${{ steps.run_tests.outcome }}" == "success" ]]; then
            echo "Tests succeeded" >> log.txt
          else
            echo "Tests failed" >> log.txt
          fi
      - name: Upload log file to artifact
        uses: actions/upload-artifact@v2
        with:
          name: log.txt
          path: log.txt
      - name: Upload tests log file to artifact
        uses: actions/upload-artifact@v2
        with:
          name: assn3_test_results.txt
          path: assn3_test_results.txt
      - name: assert tests
        run: |
          if [[ "${{ steps.run_tests.outcome }}" == "failure" ]]; then
            exit 1
          fi

  query:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Docker image from artifact
        uses: actions/download-artifact@v2
        with:
          name: dish_meal_services
      - name: Load Docker image
        run: docker load < dish_meal_services.tar.gz
      - name: Run Docker image
        env:
          NINJA_API_KEY: ${{secrets.NINJA_API_KEY}}
        run: |
          docker run -e NINJA_API_KEY -p 8000:8000 -d dish_meal_services
          sleep 5
          docker ps
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Run Query
        run: |
          python ./jobProcess.py > query_log.txt
      - name: Upload response.txt to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: response.txt
          path: ./response.txt
